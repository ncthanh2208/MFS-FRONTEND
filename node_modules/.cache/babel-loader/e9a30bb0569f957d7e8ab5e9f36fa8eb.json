{"ast":null,"code":"var _jsxFileName = \"D:\\\\MSF\\\\MSF-FRONTEND\\\\lib\\\\src\\\\components\\\\upload\\\\UploadIndex.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport { useHistory } from \"react-router-dom\";\nimport TextField from '@material-ui/core/TextField';\nimport Http from '../../http/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpLoadForm = () => {\n  _s();\n\n  const [description, setValue] = useState({\n    category: '',\n    comment: ''\n  });\n  const [dataFile, setDataFile] = useState();\n\n  const handleOnChage = event => {\n    setValue({ ...description,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const upload = async () => {\n    //------------ files/{username} pathvariable fle\n    const formData = new FormData();\n    console.log(dataFile);\n    formData.append(\"myFile\", dataFile);\n    console.log(formData);\n    await fetch(`http://localhost:9191/files/susan?file=${dataFile.name}`, {\n      method: 'POST',\n      body: formData,\n      headers: {\n        ContentType: 'multipart/form-data',\n        Authorization: localStorage.getItem('token'),\n        mode: 'cors'\n      }\n    }).then(response => response.json()).then(result => {\n      console.log('Success:', result);\n    }).catch(error => {\n      console.error('Error:', error);\n    }); // const resp = await Http.postSth(`files/${localStorage.getItem('username')}`, formData)\n    // console.log(resp)\n  };\n\n  const handleUploadFile = event => {\n    setDataFile(event.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"upload\",\n      className: \"upfile\",\n      onChange: handleUploadFile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"outlined-basic\",\n      label: \"Category\",\n      variant: \"outlined\",\n      onChange: handleOnChage,\n      value: description.category,\n      name: \"category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"outlined-basic\",\n      label: \"Comment\",\n      variant: \"outlined\",\n      onChange: handleOnChage,\n      value: description.comment,\n      name: \"comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"btn-signin\",\n      onClick: upload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpLoadForm, \"Ip4oMVGeRw58uXkBwPQ6fPJlGRs=\");\n\n_c = UpLoadForm;\nexport default UpLoadForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpLoadForm\");","map":{"version":3,"sources":["D:/MSF/MSF-FRONTEND/lib/src/components/upload/UploadIndex.js"],"names":["React","useState","Button","useHistory","TextField","Http","UpLoadForm","description","setValue","category","comment","dataFile","setDataFile","handleOnChage","event","target","name","value","upload","formData","FormData","console","log","append","fetch","method","body","headers","ContentType","Authorization","localStorage","getItem","mode","then","response","json","result","catch","error","handleUploadFile","files"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Http from '../../http/apiService';\r\nconst UpLoadForm = () => {\r\n    const [description, setValue] = useState({\r\n        category: '',\r\n        comment: '',\r\n    });\r\n    const [dataFile, setDataFile] = useState();\r\n    const handleOnChage = (event) => {\r\n        setValue({\r\n            ...description,\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    const upload = async () => {\r\n        //------------ files/{username} pathvariable fle\r\n        const formData = new FormData();\r\n        console.log(dataFile)\r\n        formData.append(\"myFile\", dataFile)\r\n        console.log(formData);\r\n        await fetch(\r\n            `http://localhost:9191/files/susan?file=${dataFile.name}`,\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n                headers: {                  \r\n                    ContentType: 'multipart/form-data',\r\n                    Authorization: localStorage.getItem('token'),\r\n                    mode: 'cors',\r\n                }\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    \r\n    // const resp = await Http.postSth(`files/${localStorage.getItem('username')}`, formData)\r\n    // console.log(resp)\r\n}\r\nconst handleUploadFile = (event) => {\r\n    setDataFile(event.target.files[0]);\r\n}\r\nreturn (\r\n    <React.Fragment>\r\n        <input type=\"file\" name=\"upload\" className=\"upfile\" onChange={handleUploadFile} />\r\n        <TextField id=\"outlined-basic\" label=\"Category\" variant=\"outlined\" onChange={handleOnChage} value={description.category} name=\"category\" />\r\n        <TextField id=\"outlined-basic\" label=\"Comment\" variant=\"outlined\" onChange={handleOnChage} value={description.comment} name=\"comment\" />\r\n        <Button className=\"btn-signin\" onClick={upload}>Upload</Button>\r\n    </React.Fragment>\r\n);\r\n}\r\nexport default UpLoadForm;"]},"metadata":{},"sourceType":"module"}